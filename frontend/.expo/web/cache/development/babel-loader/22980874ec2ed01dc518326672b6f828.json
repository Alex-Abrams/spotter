{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _BaseInput2 = _interopRequireDefault(require(\"./BaseInput\"));\n\nvar _jsxFileName = \"/home/alex/api_test/rn_testapp/node_modules/react-native-textinput-effects/lib/Madoka.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Madoka = function (_BaseInput) {\n  (0, _inherits2.default)(Madoka, _BaseInput);\n\n  var _super = _createSuper(Madoka);\n\n  function Madoka() {\n    (0, _classCallCheck2.default)(this, Madoka);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Madoka, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          label = _this$props.label,\n          containerStyle = _this$props.style,\n          inputHeight = _this$props.height,\n          inputPadding = _this$props.inputPadding,\n          labelHeight = _this$props.labelHeight,\n          inputStyle = _this$props.inputStyle,\n          labelStyle = _this$props.labelStyle,\n          borderColor = _this$props.borderColor;\n      var _this$state = this.state,\n          width = _this$state.width,\n          focusedAnim = _this$state.focusedAnim,\n          value = _this$state.value;\n      return _react.default.createElement(_reactNative.View, {\n        style: [containerStyle, {\n          height: inputHeight + labelHeight + 8\n        }],\n        onLayout: this._onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: [styles.inputContainer, {\n          borderBottomColor: borderColor\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n        ref: this.input\n      }, this.props, {\n        style: [styles.textInput, inputStyle, {\n          width: width,\n          height: inputHeight,\n          paddingHorizontal: inputPadding\n        }],\n        value: value,\n        onBlur: this._onBlur,\n        onChange: this._onChange,\n        onFocus: this._onFocus,\n        underlineColorAndroid: 'transparent',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }\n      })), _react.default.createElement(_reactNative.Animated.View, {\n        style: {\n          position: 'absolute',\n          right: 0,\n          bottom: 0,\n          width: 2,\n          height: focusedAnim.interpolate({\n            inputRange: [0, 0.2, 1],\n            outputRange: [0, inputHeight, inputHeight]\n          }),\n          backgroundColor: borderColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.Animated.View, {\n        style: {\n          position: 'absolute',\n          right: 0,\n          top: 0,\n          height: 2,\n          width: focusedAnim.interpolate({\n            inputRange: [0, 0.2, 0.8, 1],\n            outputRange: [0, 0, width, width]\n          }),\n          backgroundColor: borderColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.Animated.View, {\n        style: {\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          width: 2,\n          height: focusedAnim.interpolate({\n            inputRange: [0, 0.8, 1],\n            outputRange: [0, 0, inputHeight]\n          }),\n          backgroundColor: borderColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }\n      })), _react.default.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Animated.View, {\n        style: [styles.labelContainer, {\n          width: width,\n          height: labelHeight,\n          bottom: focusedAnim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [labelHeight + inputPadding, 0]\n          }),\n          left: inputPadding\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Animated.Text, {\n        style: [styles.label, labelStyle, {\n          fontSize: focusedAnim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [18, 14]\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 13\n        }\n      }, label))));\n    }\n  }]);\n  return Madoka;\n}(_BaseInput2.default);\n\nexports.default = Madoka;\nMadoka.propTypes = {\n  borderColor: _propTypes.default.string,\n  labelHeight: _propTypes.default.number,\n  inputPadding: _propTypes.default.number,\n  height: _propTypes.default.number\n};\nMadoka.defaultProps = {\n  borderColor: '#7A7593',\n  animationDuration: 250,\n  labelHeight: 24,\n  inputPadding: 16,\n  height: 48\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  inputContainer: {\n    borderBottomWidth: 2\n  },\n  labelContainer: {\n    position: 'absolute'\n  },\n  label: {\n    backgroundColor: 'transparent',\n    fontWeight: 'bold',\n    color: '#6a7989'\n  },\n  textInput: {\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18,\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"sources":["/home/alex/api_test/rn_testapp/node_modules/react-native-textinput-effects/lib/Madoka.js"],"names":["Madoka","props","label","containerStyle","style","inputHeight","height","inputPadding","labelHeight","inputStyle","labelStyle","borderColor","state","width","focusedAnim","value","_onLayout","styles","inputContainer","borderBottomColor","input","textInput","paddingHorizontal","_onBlur","_onChange","_onFocus","position","right","bottom","interpolate","inputRange","outputRange","backgroundColor","top","left","focus","labelContainer","fontSize","BaseInput","propTypes","PropTypes","string","number","defaultProps","animationDuration","StyleSheet","create","borderBottomWidth","fontWeight","color","paddingVertical"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n  StyleSheet,\n} from 'react-native';\n\nimport BaseInput from './BaseInput';\n\nexport default class Madoka extends BaseInput {\n  static propTypes = {\n    /*\n     * this is applied as active border and label color\n     */\n    borderColor: PropTypes.string,\n    labelHeight: PropTypes.number,\n    inputPadding: PropTypes.number,\n    height: PropTypes.number,\n  };\n\n  static defaultProps = {\n    borderColor: '#7A7593',\n    animationDuration: 250,\n    labelHeight: 24,\n    inputPadding: 16,\n    height: 48,\n  };\n\n  render() {\n    const {\n      label,\n      style: containerStyle,\n      height: inputHeight,\n      inputPadding,\n      labelHeight,\n      inputStyle,\n      labelStyle,\n      borderColor,\n    } = this.props;\n    const {\n      width,\n      focusedAnim,\n      value,\n    } = this.state;\n\n    return (\n      <View\n        style={[containerStyle, { height: inputHeight + labelHeight + 8 }]}\n        onLayout={this._onLayout}\n      >\n        <View\n          style={[styles.inputContainer, { borderBottomColor: borderColor }]}\n        >\n          <TextInput\n            ref={this.input}\n            {...this.props}\n            style={[\n              styles.textInput,\n              inputStyle,\n              {\n                width,\n                height: inputHeight,\n                paddingHorizontal: inputPadding,\n              },\n            ]}\n            value={value}\n            onBlur={this._onBlur}\n            onChange={this._onChange}\n            onFocus={this._onFocus}\n            underlineColorAndroid={'transparent'}\n          />\n          {/* right border */}\n          <Animated.View\n            style={{\n              position: 'absolute',\n              right: 0,\n              bottom: 0,\n              width: 2,\n              height: focusedAnim.interpolate({\n                inputRange: [0, 0.2, 1],\n                outputRange: [0, inputHeight, inputHeight],\n              }),\n              backgroundColor: borderColor,\n            }}\n          />\n          {/* top border */}\n          <Animated.View\n            style={{\n              position: 'absolute',\n              right: 0,\n              top: 0,\n              height: 2,\n              width: focusedAnim.interpolate({\n                inputRange: [0, 0.2, 0.8, 1],\n                outputRange: [0, 0, width, width],\n              }),\n              backgroundColor: borderColor,\n            }}\n          />\n          {/* left border */}\n          <Animated.View\n            style={{\n              position: 'absolute',\n              left: 0,\n              top: 0,\n              width: 2,\n              height: focusedAnim.interpolate({\n                inputRange: [0, 0.8, 1],\n                outputRange: [0, 0, inputHeight],\n              }),\n              backgroundColor: borderColor,\n            }}\n          />\n        </View>\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <Animated.View\n            style={[\n              styles.labelContainer,\n              {\n                width,\n                height: labelHeight,\n                bottom: focusedAnim.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [labelHeight + inputPadding, 0],\n                }),\n                left: inputPadding,\n              },\n            ]}\n          >\n            <Animated.Text\n              style={[\n                styles.label,\n                labelStyle,\n                {\n                  fontSize: focusedAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [18, 14],\n                  }),\n                },\n              ]}\n            >\n              {label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableWithoutFeedback>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  inputContainer: {\n    borderBottomWidth: 2,\n  },\n  labelContainer: {\n    position: 'absolute',\n  },\n  label: {\n    backgroundColor: 'transparent',\n    fontWeight: 'bold',\n    color: '#6a7989',\n  },\n  textInput: {\n    paddingVertical: 0,\n    color: 'black',\n    fontSize: 18,\n    fontWeight: 'bold',\n  },\n});\n"]},"metadata":{},"sourceType":"script"}