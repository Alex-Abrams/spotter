{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _BaseInput2 = _interopRequireDefault(require(\"./BaseInput\"));\n\nvar _jsxFileName = \"/home/alex/api_test/rn_testapp/node_modules/react-native-textinput-effects/lib/Sae.js\";\n\nfunction _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Sae = function (_BaseInput) {\n  (0, _inherits2.default)(Sae, _BaseInput);\n\n  var _super = _createSuper(Sae);\n\n  function Sae() {\n    (0, _classCallCheck2.default)(this, Sae);\n    return _super.apply(this, arguments);\n  }\n\n  (0, _createClass2.default)(Sae, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          iconClass = _this$props.iconClass,\n          iconColor = _this$props.iconColor,\n          iconName = _this$props.iconName,\n          label = _this$props.label,\n          containerStyle = _this$props.style,\n          inputHeight = _this$props.height,\n          inputPadding = _this$props.inputPadding,\n          labelHeight = _this$props.labelHeight,\n          borderHeight = _this$props.borderHeight,\n          inputStyle = _this$props.inputStyle,\n          labelStyle = _this$props.labelStyle;\n      var _this$state = this.state,\n          width = _this$state.width,\n          focusedAnim = _this$state.focusedAnim,\n          value = _this$state.value;\n\n      var AnimatedIcon = _reactNative.Animated.createAnimatedComponent(iconClass);\n\n      return _react.default.createElement(_reactNative.View, {\n        style: [styles.container, containerStyle, {\n          height: inputHeight + inputPadding\n        }],\n        onLayout: this._onLayout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNative.Animated.View, {\n        style: {\n          position: 'absolute',\n          bottom: focusedAnim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, labelHeight + inputPadding]\n          })\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.Animated.Text, {\n        style: [styles.label, labelStyle, {\n          fontSize: focusedAnim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [18, 12]\n          })\n        }],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }\n      }, label))), _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n        ref: this.input\n      }, this.props, {\n        style: [styles.textInput, inputStyle, {\n          width: width,\n          height: inputHeight,\n          paddingTop: inputPadding / 2\n        }],\n        value: value,\n        onBlur: this._onBlur,\n        onChange: this._onChange,\n        onFocus: this._onFocus,\n        underlineColorAndroid: 'transparent',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 9\n        }\n      })), _react.default.createElement(_reactNative.TouchableWithoutFeedback, {\n        onPress: this.focus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(AnimatedIcon, {\n        name: iconName,\n        color: iconColor,\n        style: {\n          position: 'absolute',\n          bottom: 0,\n          right: focusedAnim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, width + inputPadding]\n          }),\n          transform: [{\n            rotate: focusedAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: ['0deg', '-90deg']\n            })\n          }],\n          fontSize: 20,\n          backgroundColor: 'transparent'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }\n      })), _react.default.createElement(_reactNative.Animated.View, {\n        style: {\n          position: 'absolute',\n          bottom: 0,\n          right: 0,\n          height: borderHeight,\n          width: focusedAnim.interpolate({\n            inputRange: [0, 1],\n            outputRange: [0, width]\n          }),\n          backgroundColor: iconColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return Sae;\n}(_BaseInput2.default);\n\nexports.default = Sae;\nSae.propTypes = {\n  height: _propTypes.default.number,\n  borderHeight: _propTypes.default.number,\n  iconClass: _propTypes.default.func.isRequired,\n  iconName: _propTypes.default.string,\n  iconColor: _propTypes.default.string,\n  inputPadding: _propTypes.default.number,\n  labelHeight: _propTypes.default.number\n};\nSae.defaultProps = {\n  iconColor: 'white',\n  height: 48,\n  inputPadding: 16,\n  labelHeight: 24,\n  borderHeight: 2,\n  animationDuration: 300,\n  iconName: 'pencil'\n};\n\nvar styles = _reactNative.StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  label: {\n    backgroundColor: 'transparent',\n    fontWeight: 'bold',\n    color: '#7771ab'\n  },\n  textInput: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    paddingLeft: 0,\n    color: 'white',\n    fontSize: 18\n  }\n});","map":{"version":3,"sources":["/home/alex/api_test/rn_testapp/node_modules/react-native-textinput-effects/lib/Sae.js"],"names":["Sae","props","iconClass","iconColor","iconName","label","containerStyle","style","inputHeight","height","inputPadding","labelHeight","borderHeight","inputStyle","labelStyle","state","width","focusedAnim","value","AnimatedIcon","Animated","createAnimatedComponent","styles","container","_onLayout","focus","position","bottom","interpolate","inputRange","outputRange","fontSize","input","textInput","paddingTop","_onBlur","_onChange","_onFocus","right","transform","rotate","backgroundColor","BaseInput","propTypes","PropTypes","number","func","isRequired","string","defaultProps","animationDuration","StyleSheet","create","overflow","fontWeight","color","left","paddingLeft"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Animated,\n  TextInput,\n  TouchableWithoutFeedback,\n  View,\n  StyleSheet,\n} from 'react-native';\n\nimport BaseInput from './BaseInput';\n\nexport default class Sae extends BaseInput {\n  static propTypes = {\n    height: PropTypes.number,\n    /*\n     * active border height\n     */\n    borderHeight: PropTypes.number,\n    /*\n     * This is the icon component you are importing from react-native-vector-icons.\n     * import FontAwesomeIcon from 'react-native-vector-icons/FontAwesome';\n     * iconClass={FontAwesomeIcon}\n     */\n    iconClass: PropTypes.func.isRequired,\n    /*\n     * Passed to react-native-vector-icons library as name prop\n     */\n    iconName: PropTypes.string,\n    /*\n     * Passed to react-native-vector-icons library as color prop.\n     * This is also used as border color.\n     */\n    iconColor: PropTypes.string,\n    inputPadding: PropTypes.number,\n    labelHeight: PropTypes.number,\n  };\n\n  static defaultProps = {\n    iconColor: 'white',\n    height: 48,\n    inputPadding: 16,\n    labelHeight: 24,\n    borderHeight: 2,\n    animationDuration: 300,\n    iconName: 'pencil',\n  };\n\n  render() {\n    const {\n      iconClass,\n      iconColor,\n      iconName,\n      label,\n      style: containerStyle,\n      height: inputHeight,\n      inputPadding,\n      labelHeight,\n      borderHeight,\n      inputStyle,\n      labelStyle,\n    } = this.props;\n    const { width, focusedAnim, value } = this.state;\n    const AnimatedIcon = Animated.createAnimatedComponent(iconClass);\n\n    return (\n      <View\n        style={[\n          styles.container,\n          containerStyle,\n          {\n            height: inputHeight + inputPadding,\n          },\n        ]}\n        onLayout={this._onLayout}\n      >\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <Animated.View\n            style={{\n              position: 'absolute',\n              bottom: focusedAnim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, labelHeight + inputPadding],\n              }),\n            }}\n          >\n            <Animated.Text\n              style={[\n                styles.label,\n                labelStyle,\n                {\n                  fontSize: focusedAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: [18, 12],\n                  }),\n                },\n              ]}\n            >\n              {label}\n            </Animated.Text>\n          </Animated.View>\n        </TouchableWithoutFeedback>\n        <TextInput\n          ref={this.input}\n          {...this.props}\n          style={[\n            styles.textInput,\n            inputStyle,\n            {\n              width,\n              height: inputHeight,\n              paddingTop: inputPadding / 2,\n            },\n          ]}\n          value={value}\n          onBlur={this._onBlur}\n          onChange={this._onChange}\n          onFocus={this._onFocus}\n          underlineColorAndroid={'transparent'}\n        />\n        <TouchableWithoutFeedback onPress={this.focus}>\n          <AnimatedIcon\n            name={iconName}\n            color={iconColor}\n            style={{\n              position: 'absolute',\n              bottom: 0,\n              right: focusedAnim.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0, width + inputPadding],\n              }),\n              transform: [\n                {\n                  rotate: focusedAnim.interpolate({\n                    inputRange: [0, 1],\n                    outputRange: ['0deg', '-90deg'],\n                  }),\n                },\n              ],\n              fontSize: 20,\n              backgroundColor: 'transparent',\n            }}\n          />\n        </TouchableWithoutFeedback>\n        {/* bottom border */}\n        <Animated.View\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            right: 0,\n            height: borderHeight,\n            width: focusedAnim.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, width],\n            }),\n            backgroundColor: iconColor,\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  label: {\n    backgroundColor: 'transparent',\n    fontWeight: 'bold',\n    color: '#7771ab',\n  },\n  textInput: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    paddingLeft: 0,\n    color: 'white',\n    fontSize: 18,\n  },\n});\n"]},"metadata":{},"sourceType":"script"}